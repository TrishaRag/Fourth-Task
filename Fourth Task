// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {
    // Owner of the contract
    address owner;

    // Counter for proposal IDs
    uint256 private counter;

    // Proposal structure
    struct Proposal {
        string description; // Description of the proposal
        uint256 approve; // Number of approve votes
        uint256 reject; // Number of reject votes
        uint256 pass; // Number of pass votes
        uint256 total_vote_to_end; // When the total votes in the proposal reaches this limit, proposal ends
        bool current_state; // This shows the current state of the proposal, meaning whether it passes or fails
        bool is_active; // This shows if others can vote on our contract
    }

    // Recordings of previous proposals
    mapping(uint256 => Proposal) proposal_history;

    // Array to keep track of addresses that have voted
    address[] private voted_addresses;

    // Constructor to set the owner of the contract
    constructor() {
        owner = msg.sender;
        voted_addresses.push(msg.sender);
    }

    // Modifier to only allow the owner to perform certain actions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Modifier to check if a proposal is active
    modifier active() {
        require(proposal_history[counter].is_active == true, "The proposal is not active");
        _;
    }

    // Modifier to check if an address is a new voter
    modifier newVoter(address _address) {
        require(!isVoted(_address), "Address has already voted");
        _;
    }

    // Function to set a new owner for the contract
    function setOwner(address new_owner) external onlyOwner {
        owner = new_owner;
    }

    // Function to create a new proposal (only callable by the owner)
    function create(string calldata _description, uint256 _total_vote_to_end) external onlyOwner {
        counter += 1;
        proposal_history[counter] = Proposal({
            description: _description,
            approve: 0,
            reject: 0,
            pass: 0,
            total_vote_to_end: _total_vote_to_end,
            current_state: false,
            is_active: true
        });
    }

    // Function to allow voting on a proposal
    function vote(uint8 choice) external active newVoter(msg.sender) {
        Proposal storage proposal = proposal_history[counter];
        uint256 total_vote = proposal.approve + proposal.reject + proposal.pass;

        voted_addresses.push(msg.sender);

        if (choice == 1) {
            proposal.approve += 1;
            proposal.current_state = calculateCurrentState();
        } else if (choice == 2) {
            proposal.reject += 1;
            proposal.current_state = calculateCurrentState();
        } else if (choice == 0) {
            proposal.pass += 1;
            proposal.current_state = calculateCurrentState();
        }

        if ((proposal.total_vote_to_end - total_vote == 1) && (choice == 1 || choice == 2 || choice == 0)) {
            proposal.is_active = false;
            voted_addresses = [owner];
        }
    }

    // Function to calculate the current state of a proposal
    function calculateCurrentState() private view returns (bool) {
        Proposal storage proposal = proposal_history[counter];
        // Custom logic to determine the proposal state
        // Example logic: Proposal passes if more than half of total votes are approve
        if (proposal.approve > (proposal.approve + proposal.reject + proposal.pass) / 2) {
            return true;
        } else {
            return false;
        }
    }

    // Internal function to check if an address has already voted
    function isVoted(address _address) private view returns (bool) {
        for (uint256 i = 0; i < voted_addresses.length; i++) {
            if (voted_addresses[i] == _address) {
                return true;
            }
        }
        return false;
    }
}
